name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: vaultify
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: vaultify
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: vaultify
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: vaultify.exe
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build binary
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-apple-darwin" && "${{ runner.os }}" == "macOS" ]]; then
            # For macOS ARM64 cross-compilation
            export SDKROOT=$(xcrun -sdk macosx --show-sdk-path)
            export MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)
          fi
          cargo build --release --target ${{ matrix.target }}
        shell: bash
      
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ matrix.binary }}

  release:
    name: Create release and publish to npm
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: binaries
      
      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find binaries -type f -ls
      
      - name: Create archives
        run: |
          cd binaries
          tar czf vaultify-linux-x64.tar.gz -C x86_64-unknown-linux-gnu vaultify
          tar czf vaultify-macos-x64.tar.gz -C x86_64-apple-darwin vaultify
          tar czf vaultify-macos-arm64.tar.gz -C aarch64-apple-darwin vaultify
          zip vaultify-windows-x64.zip -j x86_64-pc-windows-msvc/vaultify.exe
          echo "Created archives:"
          ls -la *.tar.gz *.zip
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            binaries/*.tar.gz
            binaries/*.zip
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Publish to npm
        run: |
          cd npm
          VERSION=${GITHUB_REF#refs/tags/v}
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            npm version $VERSION --no-git-tag-version
          fi
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}